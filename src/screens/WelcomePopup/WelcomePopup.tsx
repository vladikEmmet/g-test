"use client";

import React, {useEffect, useState} from 'react';
import styles from "./WelcomePopup.module.scss";
import {CustomModal} from "@/components/Modal/CustomModal";
import Select from "react-select";
import {useModal} from "@/store/store";

interface Option {
    value: string;
    label: string;
}

interface ArrayObjectSelectState {
    selectedName: Option | null;
}

const options: Option[] = [
    { value: '–∞–π—Ç–æ—à', label: '–ê–π—Ç–æ—à üè≥Ô∏è‚Äçüåà' },
    { value: '–µ–ª–∂–∞–Ω', label: '–ï–ª–∂–∞–Ω üè≥Ô∏è‚Äçüåà' },
    { value: '–≤–ª–∞–¥', label: '–í–ª–∞–¥' },
    { value: '–º–∏–∫–∞', label: '–ú–∏–∫–∞' },
    { value: '–∞–ª–∏—Ö–∞–Ω', label: '–ê–ª–∏—Ö–∞–Ω' },
    { value: '–Ω—É—Ä–∞–ª–∏', label: '–ù—É—Ä–∞–ª–∏' },
    { value: '–Ω–∏–∫–∏—Ç–∞', label: '–ù–∏–∫–∏—Ç–∞' },
    { value: '–Ω—É—Ä–¥–∞—É–ª–µ—Ç', label: '–ù—É—Ä–¥–∞—É–ª–µ—Ç' },
    { value: '—É–ª–∞–Ω', label: '–£–ª–∞–Ω' },
    { value: '—Å—É–ª—Ç–∞–Ω', label: '–°—É–ª—Ç–∞–Ω' },
];

export const WelcomePopup = () => {
    const {onClose} = useModal();
    const [state, setState] = useState<ArrayObjectSelectState>({
        selectedName: null,
    });

    useEffect(() => {
        const name = typeof window !== "undefined" ? localStorage.getItem("name") : null;
        if(name) {
            onClose();
        }

    }, [])

    const onSubmit = () => {
        if(state.selectedName) {
            localStorage.setItem("name", state.selectedName.value);
            onClose();
            return;
        }

        alert("–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è!");
    }

    return (
        <CustomModal onSubmit={onSubmit}>
            <h1 className={styles.title}>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ –≥–µ—è!</h1>
            <h2 className={styles.subtitle}>–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–µ –∏–º—è:</h2>
            <Select value={state.selectedName}
                onChange={(option: Option | null) => {
                    setState({selectedName: option});
                }}
                getOptionLabel={(option: Option) => option.label}
                getOptionValue={(option: Option) => option.value}
                options={options}
                isClearable={true}
                isSearchable={true}
            />
        </CustomModal>
    );
};